{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT13, ratio18_1, false);\nmotor leftMotorB = motor(PORT3, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT2, ratio18_1, true);\nmotor rightMotorB = motor(PORT11, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ninertial DrivetrainInertial = inertial(PORT9);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\n\nmotor grip = motor(PORT5, ratio18_1, true);\n\nbumper KillSwitch = bumper(Brain.ThreeWirePort.B);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\nvoid vexcodeInit() {\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n  // Begin project code\n  while(true){ // Infinite loop to continuously check and adjust\n    // Get the current heading of the robot\n    double currentHeading = Drivetrain.heading();\n    Drivetrain.setDriveVelocity(10, percent);  // Set the drive velocity\n    Drivetrain.setTurnVelocity(15, percent);   // Set the turn velocity\n  \n    Drivetrain.drive(reverse);  // Start driving forward\n    // Debug: print heading to Brain screen (for troubleshooting)\n    Brain.Screen.print(\"Heading: %.2f\", currentHeading);\n    Brain.Screen.newLine();\n\n    // If the robot drifts too far to the left (heading < -2 degrees)\n    if (currentHeading < -25) {\n      Drivetrain.turnToHeading(0, degrees);\n      wait(100, msec);  // Wait for a short moment to correct course\n    }\n    // If the robot drifts too far to the right (heading > 2 degrees)\n    else if (currentHeading > 25) {\n     Drivetrain.turnToHeading(360, degrees);\n     wait(100, msec);  // Wait for a short moment to correct course\n    }\n\n    // Continue driving forward while making adjustments\n    Drivetrain.drive(reverse);\n    wait(50, msec);  // Small delay to prevent excessive turning and maintain smooth movement\n  \n  \n    //get drive train to stop once it detects the button press\n    if(KillSwitch.pressing() == true) {\n      Brain.Screen.setCursor(1, 1);\n      printf(\"Stupid THing Works\");\n      Brain.Screen.newLine();\n      break;\n    }\n  \n  }\n   \n\n   \n    \n  \n  \n  Drivetrain.setDriveVelocity(0, percent);\n  Drivetrain.stop();\n\n}\n","textLanguage":"cpp","robotConfig":[{"port":[13,3,2,11,9],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[5],"name":"grip","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"KillSwitch","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":3,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}